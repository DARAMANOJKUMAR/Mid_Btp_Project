# -*- coding: utf-8 -*-
"""Mid_Btp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o8Icd7iXttxfLb3yQDLRa9CicvK4V6x2

Importing Dependicies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing """

#loading csv data to pandas data frame (structured tables)
heart_data=pd.read_csv('/content/heart_disease_data.csv')

#print first  5 rows of the data set
heart_data.head()

#print the last 5 rows of the data set
heart_data.tail()

#to check no of rows and cols
heart_data.shape

#getting some info abt the data
heart_data.info()

#checking for missing values in another way
heart_data.isnull().sum()

# statistical measure of the data
heart_data.describe()

#checking the distribution of target variable
heart_data['target'].value_counts()

"""1--> defective heart
 2--> healthy heart
both are in equal distribution so no problem in classifying

Using all the features mentioned in the columns we are going to predict the target value

So we are going to split the features and target
"""

x=heart_data.drop(columns='target',axis=1)
y=heart_data['target']

print(x)

print(y)

"""Splitting the data into training data and testing data"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""Model Training

Logistic Regression (using for binary classification)
"""

model=LogisticRegression()

#training the  logisitic regression model with the train data we had 
model.fit(x_train,y_train)

"""Evaluation of our model 
Accuracy score parameter using here
"""

#accuracy of training data
x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('Accuracy on Training data : ', training_data_accuracy)

#accuracy for test data
x_test_prediction=model.predict(x_test)
testing_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('Accuracy on Test data : ',testing_data_accuracy)

"""Bulding Prediction System"""

input_data=(43,1,0,120,177,0,0,120,1,2.5,1,0,3)

#change input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape numpy array as we are predicting for only one data
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)

if(prediction[0]==0):
  print('Person has no heart Disease')
else:
  print('Person has heart disease')

